; Default Interrupt handlers
ORG 0x1E00              ; This will be stuffed near the end of ram.
                        ; Starting at 0x1E00 leaves 30kB for user program.

__IVT_ENTRY_0__         hcf  ; Overflow
__IVT_ENTRY_1__         hcf  ; Zero div
__IVT_ENTRY_2__         hcf  ; Unknow instruction
__IVT_ENTRY_3__         hcf  ; Memory protection
__IVT_ENTRY_4__         hcf  ; unused
__IVT_ENTRY_5__         hcf  ; Memory parity error

; Timer interrupt
;     The handler will just clear the interrupt and return.
__IVT_ENTRY_6__         pushr sp        ;
                        load  r0, =0    ; PIC command for clearing interrupts is 0
                        out   r0, =0x20 ; send it to PIC command port
                        popr  sp        ;
                        iexit sp, =0   
__IVT_ENTRY_7__         hcf ; kbd
__IVT_ENTRY_8__         hcf ; mouse
__IVT_ENTRY_9__         hcf ; disc drive
__IVT_ENTRY_10__        hcf ; printer

; SVC HALT; Halt permanently
__IVT_ENTRY_11__        hcf ; 

; SVC READ
__IVT_ENTRY_12__        pushr   sp          ;
                        in      r1, =KBD    ;
                        load    r2, @-9(sp) ;
                        store   r1, @r2     ;
                        popr    sp          ;
                        iexit   sp, =1;     ;

; SVC WRITE
__IVT_ENTRY_13__        pushr   sp          ;
                        load    r1, -9(sp)  ;
                        out     r1, =CRT    ;
                        popr    sp          ;
                        iexit   sp, =1;     ;

; SVC TIME
__IVT_ENTRY_14__        pushr   sp          ;
                        in      r1, =RTC    ;
                        load    r2, r1      ; Sec
                        mod     r2, =60     ;
                        store   r2, @-9(sp) ;
                        div     r1, =60     ;
                        load    r2, r1      ; Min
                        mod     r2, =60     ;
                        store   r2, @-10(sp);
                        div     r1, =60     ;
                        load    r2, r1      ; Hr
                        mod     r2, =24     ;
                        store   r2, @-11(sp);
                        popr    sp,         ;
                        iexit   sp, =3      ;


; SVC DATE
;       This is long. Maybe should implement this in RTC device?
__IVT_ENTRY_15__    pushr   sp          ;
            in      r1, =RTC    ; Get Unix time
            load    r2, r1      ; 
            load    r3, =3600   ; R3 will contain number of seconds in a day.
            mul     r3, =24     ; 
            mod     r2, r3      ; R2 now contains time of day in seconds.
            sub     r1, r2      ; R1 now contais date in number of seconds, without time of day.
            div     r1, r3      ; R1 now contains date in number of days.
            load    r2, =1970   ; R2 will contain current year.
            load    r3, r1      ; 
            mod     r3, =1461   ; Number of days in current 4-year cycle since epoch.
            sub     r1, r3      ; 
            div     r1, =1461   ; Now R1 contains number of 4-year cycles since epoch.
            mul     r1, =4      ; 
            add     r2, r1      ; Now R2 contains the start of current 4y cycle 
            
            load    r1, =0      ; Leap day

            comp    r3, =365    ; 1st year in cycle
            jles    yr_done     ;
            sub     r3, =365    ; Subtract this years days from days left
            add     r2, =1      ; 1 to current year

            comp    r3, =365    ; 2nd year in cycle
            jles    yr_done     ;
            sub     r3, =365    ;
            add     r2, =1      ; 

            load    r1, =1      ; leap day
            comp    r3, =365    ; 
            jles    yr_done     ; 3rd year in cycle
            load    r1, =0      ; Leap day
            sub     r3, =366    ;
            add     r2, =1      ;

yr_done    store r2, @-12(sp)           ; Store Year

            load    r2,     =1          ; January
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; February
            comp    r3,     =28(R1)     ; R1 adds possible leap day
            jles    mo_done             ;
            sub     r3,     =28(R1)     ;

            add     r2,     =1          ; March
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; April
            comp    r3,     =30         ;
            jles    mo_done             ;
            sub     r3,     =30         ;

            add     r2,     =1          ; May
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; June
            comp    r3,     =30         ;
            jles    mo_done             ;
            sub     r3,     =30         ;

            add     r2,     =1          ; July
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; August
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; September
            comp    r3,     =30         ;
            jles    mo_done             ;
            sub     r3,     =30         ;

            add     r2,     =1          ; October
            comp    r3,     =31         ;
            jles    mo_done             ;
            sub     r3,     =31         ;

            add     r2,     =1          ; November
            comp    r3,     =30         ;
            jles    mo_done             ;
            sub     r3,     =30         ;

            add     r2,     =1          ; December

    mo_done out     r2,     =CRT        ; print month
            store   r2, @-11(sp)        ; Store month
            add     r3,     =1          ; Calendar days don't start from zero.
            store   r3, @-10(sp)        ; Store day
            popr    sp                  ;
            iexit   sp, =3              ;